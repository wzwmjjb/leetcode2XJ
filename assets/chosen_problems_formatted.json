[
    {
        "type": "编程",
        "title": "二叉树的中序遍历",
        "content": "<p>给定一个二叉树的根节点 <code>root</code> ，返回 <em>它的 <strong>中序</strong>&nbsp;遍历</em> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg\" style=\"height: 200px; width: 125px;\" />\n<pre>\n<strong>输入：</strong>root = [1,null,2,3]\n<strong>输出：</strong>[1,3,2]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>root = []\n<strong>输出：</strong>[]\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>root = [1]\n<strong>输出：</strong>[1]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>树中节点数目在范围 <code>[0, 100]</code> 内</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶:</strong>&nbsp;递归算法很简单，你可以通过迭代算法完成吗？</p>\n<p><strong>Auxiliary Code</strong></p>\n<pre>\n<code class=\"language-c\">\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef int ElementType;\n\ntypedef struct BiNode {\n    ElementType data;\n    struct BiNode *left;\n    struct BiNode *right;\n} BiNode, *BiTree;\n\n// 根据层序遍历结果构建二叉树\nBiTree createBiTree(const int *levelOrder, int size) {\n    if (size == 0 || levelOrder[0] == -1) {\n        return NULL;\n    }\n\n    BiTree root = (BiNode *) malloc(sizeof(BiNode));\n    root->data = levelOrder[0];\n    root->left = NULL;\n    root->right = NULL;\n\n    BiNode *queue[size];\n    int front = 0, rear = 0;\n    queue[rear++] = root;\n\n    int i = 1;\n    while (i < size) {\n        BiNode *currentNode = queue[front++];\n        for (int j = 0; j < 2 && i < size; j++) {\n            if (levelOrder[i] != -1) {\n                BiNode *child = (BiNode *) malloc(sizeof(BiNode));\n                child->data = levelOrder[i];\n                child->left = NULL;\n                child->right = NULL;\n                if (j == 0) {\n                    currentNode->left = child;\n                } else {\n                    currentNode->right = child;\n                }\n                queue[rear++] = child;\n            }\n            i++;\n        }\n    }\n\n    return root;\n}\n\nint* inorderTraversal(BiTree root, int* index) {\n    // Code here...\n}\n\nvoid freeBiTree(BiTree root) {\n    if (root == NULL) {\n        return;\n    }\n    freeBiTree(root->left);\n    freeBiTree(root->right);\n    free(root);\n}\n\nint main() {\n    int n, nn;\n    scanf(\"%d\", &n);\n    nn = n;\n    int elements[n];\n    int returnSize;\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &elements[i]);\n        if (elements[i] == -1) {\n            nn--;\n        }\n    }\n\n    BiTree tree = createBiTree(elements, n);\n\n    int* result = inorderTraversal(tree, &returnSize);\n\n    for (int i = 0; i < nn; i++) {\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n\n    freeBiTree(tree);\n    free(result);\n    return 0;\n}</code>\n</pre>",
        "difficulty": "1",
        "topic": "树与二叉树",
        "tag": "LeetCode",
        "chapter": "第5章",
        "memory": 300,
        "time": 2,
        "testData": [
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            }
        ],
        "solution": [
            {
                "language": "C",
                "code": "#include <stdio.h>\n#include <stdlib.h>\n\ntypedef int ElementType;\n\ntypedef struct BiNode {\n    ElementType data;\n    struct BiNode *left;\n    struct BiNode *right;\n} BiNode, *BiTree;\n\n// 根据层序遍历结果构建二叉树\nBiTree createBiTree(const int *levelOrder, int size) {\n    if (size == 0 || levelOrder[0] == -1) {\n        return NULL;\n    }\n\n    BiTree root = (BiNode *) malloc(sizeof(BiNode));\n    root->data = levelOrder[0];\n    root->left = NULL;\n    root->right = NULL;\n\n    BiNode *queue[size];\n    int front = 0, rear = 0;\n    queue[rear++] = root;\n\n    int i = 1;\n    while (i < size) {\n        BiNode *currentNode = queue[front++];\n        for (int j = 0; j < 2 && i < size; j++) {\n            if (levelOrder[i] != -1) {\n                BiNode *child = (BiNode *) malloc(sizeof(BiNode));\n                child->data = levelOrder[i];\n                child->left = NULL;\n                child->right = NULL;\n                if (j == 0) {\n                    currentNode->left = child;\n                } else {\n                    currentNode->right = child;\n                }\n                queue[rear++] = child;\n            }\n            i++;\n        }\n    }\n\n    return root;\n}\n\nvoid inorderTraversalRecursive(BiTree root, int *result, int *index) {\n    if (root == NULL) {\n        return;\n    }\n    inorderTraversalRecursive(root->left, result, index);\n    result[(*index)++] = root->data;\n    inorderTraversalRecursive(root->right, result, index);\n}\n\nint* inorderTraversal(BiTree root, int* index) {\n    int* result = malloc(sizeof(int) * 100);\n    *index = 0;\n    inorderTraversalRecursive(root, result, index);\n    return result;\n}\n\nvoid freeBiTree(BiTree root) {\n    if (root == NULL) {\n        return;\n    }\n    freeBiTree(root->left);\n    freeBiTree(root->right);\n    free(root);\n}\n\nint main() {\n    int n, nn;\n    scanf(\"%d\", &n);\n    nn = n;\n    int elements[n];\n    int returnSize;\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &elements[i]);\n        if (elements[i] == -1) {\n            nn--;\n        }\n    }\n\n    BiTree tree = createBiTree(elements, n);\n\n    int* result = inorderTraversal(tree, &returnSize);\n\n    for (int i = 0; i < nn; i++) {\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n\n    freeBiTree(tree);\n    free(result);\n    return 0;\n}"
            }
        ]
    },
    {
        "type": "编程",
        "title": "合并二叉树",
        "content": "<p>给你两棵二叉树： <code>root1</code> 和 <code>root2</code> 。</p>\n\n<p>想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并后节点的新值；否则，<strong>不为</strong> null 的节点将直接作为新二叉树的节点。</p>\n\n<p>返回合并后的二叉树。</p>\n\n<p><strong>注意:</strong> 合并过程必须从两个树的根节点开始。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/05/merge.jpg\" style=\"height: 163px; width: 600px;\" />\n<pre>\n<strong>输入：</strong>root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]\n<strong>输出：</strong>[3,4,5,5,4,null,7]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>root1 = [1], root2 = [1,2]\n<strong>输出：</strong>[2,2]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>两棵树中的节点数目在范围 <code>[0, 2000]</code> 内</li>\n\t<li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n</ul>\n<p><strong>Auxiliary Code</strong></p>\n<pre>\n<code class=\"language-c\">\n</code>\n</pre>",
        "difficulty": "1",
        "topic": "树与二叉树",
        "tag": "LeetCode",
        "chapter": "第5章",
        "memory": 300,
        "time": 2,
        "testData": [
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            }
        ],
        "solution": [
            {
                "language": "C",
                "code": ""
            }
        ]
    },
    {
        "type": "编程",
        "title": "对称二叉树",
        "content": "<p>给你一个二叉树的根节点 <code>root</code> ， 检查它是否轴对称。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n<img alt=\"\" src=\"https://pic.leetcode.cn/1698026966-JDYPDU-image.png\" style=\"width: 354px; height: 291px;\" />\n<pre>\n<strong>输入：</strong>root = [1,2,2,3,4,4,3]\n<strong>输出：</strong>true\n</pre>\n\n<p><strong>示例 2：</strong></p>\n<img alt=\"\" src=\"https://pic.leetcode.cn/1698027008-nPFLbM-image.png\" style=\"width: 308px; height: 258px;\" />\n<pre>\n<strong>输入：</strong>root = [1,2,2,null,3,null,3]\n<strong>输出：</strong>false\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>树中节点数目在范围 <code>[1, 1000]</code> 内</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶：</strong>你可以运用递归和迭代两种方法解决这个问题吗？</p>\n<p><strong>Auxiliary Code</strong></p>\n<pre>\n<code class=\"language-c\">\n</code>\n</pre>",
        "difficulty": "1",
        "topic": "树与二叉树",
        "tag": "LeetCode",
        "chapter": "第5章",
        "memory": 300,
        "time": 2,
        "testData": [
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            }
        ],
        "solution": [
            {
                "language": "C",
                "code": ""
            }
        ]
    },
    {
        "type": "编程",
        "title": "二叉树的最大深度",
        "content": "<p>给定一个二叉树 <code>root</code> ，返回其最大深度。</p>\n\n<p>二叉树的 <strong>最大深度</strong> 是指从根节点到最远叶子节点的最长路径上的节点数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg\" style=\"width: 400px; height: 277px;\" /></p>\n\n<p>&nbsp;</p>\n\n<pre>\n<b>输入：</b>root = [3,9,20,null,null,15,7]\n<b>输出：</b>3\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>root = [1,null,2]\n<b>输出：</b>2\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>树中节点的数量在&nbsp;<code>[0, 10<sup>4</sup>]</code>&nbsp;区间内。</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n<p><strong>Auxiliary Code</strong></p>\n<pre>\n<code class=\"language-c\">\n</code>\n</pre>",
        "difficulty": "1",
        "topic": "树与二叉树",
        "tag": "LeetCode",
        "chapter": "第5章",
        "memory": 300,
        "time": 2,
        "testData": [
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            }
        ],
        "solution": [
            {
                "language": "C",
                "code": ""
            }
        ]
    },
    {
        "type": "编程",
        "title": "从前序与中序遍历序列构造二叉树",
        "content": "<p>给定两个整数数组&nbsp;<code>preorder</code> 和 <code>inorder</code>&nbsp;，其中&nbsp;<code>preorder</code> 是二叉树的<strong>先序遍历</strong>， <code>inorder</code>&nbsp;是同一棵树的<strong>中序遍历</strong>，请构造二叉树并返回其根节点。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/tree.jpg\" style=\"height: 302px; width: 277px;\" />\n<pre>\n<strong>输入</strong><strong>:</strong> preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\n<strong>输出:</strong> [3,9,20,null,null,15,7]\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> preorder = [-1], inorder = [-1]\n<strong>输出:</strong> [-1]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= preorder.length &lt;= 3000</code></li>\n\t<li><code>inorder.length == preorder.length</code></li>\n\t<li><code>-3000 &lt;= preorder[i], inorder[i] &lt;= 3000</code></li>\n\t<li><code>preorder</code>&nbsp;和&nbsp;<code>inorder</code>&nbsp;均 <strong>无重复</strong> 元素</li>\n\t<li><code>inorder</code>&nbsp;均出现在&nbsp;<code>preorder</code></li>\n\t<li><code>preorder</code>&nbsp;<strong>保证</strong> 为二叉树的前序遍历序列</li>\n\t<li><code>inorder</code>&nbsp;<strong>保证</strong> 为二叉树的中序遍历序列</li>\n</ul>\n<p><strong>Auxiliary Code</strong></p>\n<pre>\n<code class=\"language-c\">\n</code>\n</pre>",
        "difficulty": "3",
        "topic": "树与二叉树",
        "tag": "LeetCode",
        "chapter": "第5章",
        "memory": 300,
        "time": 2,
        "testData": [
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            }
        ],
        "solution": [
            {
                "language": "C",
                "code": ""
            }
        ]
    },
    {
        "type": "编程",
        "title": "二叉树展开为链表",
        "content": "<p>给你二叉树的根结点 <code>root</code> ，请你将它展开为一个单链表：</p>\n\n<ul>\n\t<li>展开后的单链表应该同样使用 <code>TreeNode</code> ，其中 <code>right</code> 子指针指向链表中下一个结点，而左子指针始终为 <code>null</code> 。</li>\n\t<li>展开后的单链表应该与二叉树 <a href=\"https://baike.baidu.com/item/%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86/6442839?fr=aladdin\" target=\"_blank\"><strong>先序遍历</strong></a> 顺序相同。</li>\n</ul>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/14/flaten.jpg\" style=\"width: 500px; height: 226px;\" />\n<pre>\n<strong>输入：</strong>root = [1,2,5,3,4,null,6]\n<strong>输出：</strong>[1,null,2,null,3,null,4,null,5,null,6]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>root = []\n<strong>输出：</strong>[]\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>root = [0]\n<strong>输出：</strong>[0]\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>树中结点数在范围 <code>[0, 2000]</code> 内</li>\n\t<li><code>-100 <= Node.val <= 100</code></li>\n</ul>\n\n<p> </p>\n\n<p><strong>进阶：</strong>你可以使用原地算法（<code>O(1)</code> 额外空间）展开这棵树吗？</p>\n<p><strong>Auxiliary Code</strong></p>\n<pre>\n<code class=\"language-c\">\n</code>\n</pre>",
        "difficulty": "3",
        "topic": "树与二叉树",
        "tag": "LeetCode",
        "chapter": "第5章",
        "memory": 300,
        "time": 2,
        "testData": [
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            }
        ],
        "solution": [
            {
                "language": "C",
                "code": ""
            }
        ]
    },
    {
        "type": "编程",
        "title": "二叉树的堂兄弟节点",
        "content": "<p>在二叉树中，根节点位于深度 <code>0</code> 处，每个深度为 <code>k</code> 的节点的子节点位于深度 <code>k+1</code> 处。</p>\n\n<p>如果二叉树的两个节点深度相同，但<strong> 父节点不同</strong> ，则它们是一对<em>堂兄弟节点</em>。</p>\n\n<p>我们给出了具有唯一值的二叉树的根节点 <code>root</code> ，以及树中两个不同节点的值 <code>x</code> 和 <code>y</code> 。</p>\n\n<p>只有与值 <code>x</code> 和 <code>y</code> 对应的节点是堂兄弟节点时，才返回 <code>true</code> 。否则，返回 <code>false</code>。</p>\n\n<p> </p>\n\n<p><strong>示例 1：<br />\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/16/q1248-01.png\" style=\"height: 160px; width: 180px;\" /></strong></p>\n\n<pre>\n<strong>输入：</strong>root = [1,2,3,4], x = 4, y = 3\n<strong>输出：</strong>false\n</pre>\n\n<p><strong>示例 2：<br />\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/16/q1248-02.png\" style=\"height: 160px; width: 201px;\" /></strong></p>\n\n<pre>\n<strong>输入：</strong>root = [1,2,3,null,4,null,5], x = 5, y = 4\n<strong>输出：</strong>true\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/16/q1248-03.png\" style=\"height: 160px; width: 156px;\" /></strong></p>\n\n<pre>\n<strong>输入：</strong>root = [1,2,3,null,4], x = 2, y = 3\n<strong>输出：</strong>false</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>二叉树的节点数介于 <code>2</code> 到 <code>100</code> 之间。</li>\n\t<li>每个节点的值都是唯一的、范围为 <code>1</code> 到 <code>100</code> 的整数。</li>\n</ul>\n\n<p> </p>\n<p><strong>Auxiliary Code</strong></p>\n<pre>\n<code class=\"language-c\">\n</code>\n</pre>",
        "difficulty": "1",
        "topic": "树与二叉树",
        "tag": "LeetCode",
        "chapter": "第5章",
        "memory": 300,
        "time": 2,
        "testData": [
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            }
        ],
        "solution": [
            {
                "language": "C",
                "code": ""
            }
        ]
    },
    {
        "type": "编程",
        "title": "叶子相似的树",
        "content": "<p>请考虑一棵二叉树上所有的叶子，这些叶子的值按从左到右的顺序排列形成一个&nbsp;<strong>叶值序列 </strong>。</p>\n\n<p><img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/16/tree.png\" style=\"height: 336px; width: 400px;\" /></p>\n\n<p>举个例子，如上图所示，给定一棵叶值序列为&nbsp;<code>(6, 7, 4, 9, 8)</code>&nbsp;的树。</p>\n\n<p>如果有两棵二叉树的叶值序列是相同，那么我们就认为它们是&nbsp;<em>叶相似&nbsp;</em>的。</p>\n\n<p>如果给定的两个根结点分别为&nbsp;<code>root1</code> 和&nbsp;<code>root2</code>&nbsp;的树是叶相似的，则返回&nbsp;<code>true</code>；否则返回 <code>false</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/03/leaf-similar-1.jpg\" style=\"height: 237px; width: 600px;\" /></p>\n\n<pre>\n<strong>输入：</strong>root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]\n<strong>输出：</strong>true\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/03/leaf-similar-2.jpg\" style=\"height: 110px; width: 300px;\" /></p>\n\n<pre>\n<strong>输入：</strong>root1 = [1,2,3], root2 = [1,3,2]\n<strong>输出：</strong>false\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>给定的两棵树结点数在&nbsp;<code>[1, 200]</code> 范围内</li>\n\t<li>给定的两棵树上的值在&nbsp;<code>[0, 200]</code> 范围内</li>\n</ul>\n<p><strong>Auxiliary Code</strong></p>\n<pre>\n<code class=\"language-c\">\n</code>\n</pre>",
        "difficulty": "1",
        "topic": "树与二叉树",
        "tag": "LeetCode",
        "chapter": "第5章",
        "memory": 300,
        "time": 2,
        "testData": [
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            }
        ],
        "solution": [
            {
                "language": "C",
                "code": ""
            }
        ]
    },
    {
        "type": "编程",
        "title": "完全二叉树插入器",
        "content": "<p><strong>完全二叉树</strong> 是每一层（除最后一层外）都是完全填充（即，节点数达到最大）的，并且所有的节点都尽可能地集中在左侧。</p>\n\n<p>设计一种算法，将一个新节点插入到一棵完全二叉树中，并在插入后保持其完整。</p>\n\n<p>实现 <code>CBTInserter</code> 类:</p>\n\n<ul>\n\t<li><code>CBTInserter(TreeNode root)</code>&nbsp;使用头节点为&nbsp;<code>root</code>&nbsp;的给定树初始化该数据结构；</li>\n\t<li><code>CBTInserter.insert(int v)</code>&nbsp; 向树中插入一个值为&nbsp;<code>Node.val == val</code>的新节点&nbsp;<code>TreeNode</code>。使树保持完全二叉树的状态，<strong>并返回插入节点</strong>&nbsp;<code>TreeNode</code>&nbsp;<strong>的父节点的值</strong>；</li>\n\t<li><code>CBTInserter.get_root()</code> 将返回树的头节点。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<ol>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2021/08/03/lc-treeinsert.jpg\" style=\"height: 143px; width: 500px;\" /></p>\n\n<pre>\n<strong>输入</strong>\n[\"CBTInserter\", \"insert\", \"insert\", \"get_root\"]\n[[[1, 2]], [3], [4], []]\n<strong>输出</strong>\n[null, 1, 2, [1, 2, 3, 4]]\n\n<strong>解释</strong>\nCBTInserter cBTInserter = new CBTInserter([1, 2]);\ncBTInserter.insert(3);  // 返回 1\ncBTInserter.insert(4);  // 返回 2\ncBTInserter.get_root(); // 返回 [1, 2, 3, 4]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>树中节点数量范围为&nbsp;<code>[1, 1000]</code>&nbsp;</li>\n\t<li><code>0 &lt;= Node.val &lt;= 5000</code></li>\n\t<li><code>root</code>&nbsp;是完全二叉树</li>\n\t<li><code>0 &lt;= val &lt;= 5000</code>&nbsp;</li>\n\t<li>每个测试用例最多调用&nbsp;<code>insert</code>&nbsp;和&nbsp;<code>get_root</code>&nbsp;操作&nbsp;<code>10<sup>4</sup></code>&nbsp;次</li>\n</ul>\n<p><strong>Auxiliary Code</strong></p>\n<pre>\n<code class=\"language-c\">\n</code>\n</pre>",
        "difficulty": "3",
        "topic": "树与二叉树",
        "tag": "LeetCode",
        "chapter": "第5章",
        "memory": 300,
        "time": 2,
        "testData": [
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            }
        ],
        "solution": [
            {
                "language": "C",
                "code": ""
            }
        ]
    },
    {
        "type": "编程",
        "title": "二叉树剪枝",
        "content": "<p>给定一个二叉树 <strong>根节点</strong>&nbsp;<code>root</code>&nbsp;，树的每个节点的值要么是 <code>0</code>，要么是 <code>1</code>。请剪除该二叉树中所有节点的值为 <code>0</code> 的子树。</p>\n\n<p>节点 <code>node</code> 的子树为&nbsp;<code>node</code> 本身，以及所有 <code>node</code>&nbsp;的后代。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,null,0,0,1]\n<strong>输出: </strong>[1,null,0,null,1] \n<strong>解释:</strong> \n只有红色节点满足条件&ldquo;所有不包含 1 的子树&rdquo;。\n右图为返回的答案。\n\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_2.png\" style=\"width:450px\" />\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,0,1,0,0,0,1]\n<strong>输出: </strong>[1,null,1,null,1]\n<strong>解释:</strong> \n\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_1.png\" style=\"width:450px\" />\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong> [1,1,0,1,1,0,1,0]\n<strong>输出: </strong>[1,1,0,1,1,null,1]\n<strong>解释:</strong> \n\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/05/1028.png\" style=\"width:450px\" />\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li>二叉树的节点个数的范围是 <code>[1,200]</code></li>\n\t<li>二叉树节点的值只会是 <code>0</code> 或 <code>1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><meta charset=\"UTF-8\" />注意：本题与主站 814&nbsp;题相同：<a href=\"https://leetcode-cn.com/problems/binary-tree-pruning/\">https://leetcode-cn.com/problems/binary-tree-pruning/</a></p>\n<p><strong>Auxiliary Code</strong></p>\n<pre>\n<code class=\"language-c\">\n</code>\n</pre>",
        "difficulty": "3",
        "topic": "树与二叉树",
        "tag": "LeetCode",
        "chapter": "第5章",
        "memory": 300,
        "time": 2,
        "testData": [
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            }
        ],
        "solution": [
            {
                "language": "C",
                "code": ""
            }
        ]
    },
    {
        "type": "编程",
        "title": "二叉树最大宽度",
        "content": "<p>给你一棵二叉树的根节点 <code>root</code> ，返回树的 <strong>最大宽度</strong> 。</p>\n\n<p>树的 <strong>最大宽度</strong> 是所有层中最大的 <strong>宽度</strong> 。</p>\n\n<div class=\"original__bRMd\">\n<div>\n<p>每一层的 <strong>宽度</strong> 被定义为该层最左和最右的非空节点（即，两个端点）之间的长度。将这个二叉树视作与满二叉树结构相同，两端点间会出现一些延伸到这一层的 <code>null</code> 节点，这些 <code>null</code> 节点也计入长度。</p>\n\n<p>题目数据保证答案将会在&nbsp; <strong>32 位</strong> 带符号整数范围内。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/03/width1-tree.jpg\" style=\"width: 359px; height: 302px;\" />\n<pre>\n<strong>输入：</strong>root = [1,3,2,5,3,null,9]\n<strong>输出：</strong>4\n<strong>解释：</strong>最大宽度出现在树的第 3 层，宽度为 4 (5,3,null,9) 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/14/maximum-width-of-binary-tree-v3.jpg\" style=\"width: 442px; height: 422px;\" />\n<pre>\n<strong>输入：</strong>root = [1,3,2,5,null,null,9,6,null,7]\n<strong>输出：</strong>7\n<strong>解释：</strong>最大宽度出现在树的第 4 层，宽度为 7 (6,null,null,null,null,null,7) 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/05/03/width3-tree.jpg\" style=\"width: 289px; height: 299px;\" />\n<pre>\n<strong>输入：</strong>root = [1,3,2,5]\n<strong>输出：</strong>2\n<strong>解释：</strong>最大宽度出现在树的第 2 层，宽度为 2 (3,2) 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>树中节点的数目范围是 <code>[1, 3000]</code></li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n</div>\n</div>\n<p><strong>Auxiliary Code</strong></p>\n<pre>\n<code class=\"language-c\">\n</code>\n</pre>",
        "difficulty": "3",
        "topic": "树与二叉树",
        "tag": "LeetCode",
        "chapter": "第5章",
        "memory": 300,
        "time": 2,
        "testData": [
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            }
        ],
        "solution": [
            {
                "language": "C",
                "code": ""
            }
        ]
    },
    {
        "type": "编程",
        "title": "二叉树的层平均值",
        "content": "<p>给定一个非空二叉树的根节点<meta charset=\"UTF-8\" />&nbsp;<code>root</code>&nbsp;, 以数组的形式返回每一层节点的平均值。与实际答案相差&nbsp;<code>10<sup>-5</sup></code> 以内的答案可以被接受。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/09/avg1-tree.jpg\" /></p>\n\n<pre>\n<strong>输入：</strong>root = [3,9,20,null,null,15,7]\n<strong>输出：</strong>[3.00000,14.50000,11.00000]\n<strong>解释：</strong>第 0 层的平均值为 3,第 1 层的平均值为 14.5,第 2 层的平均值为 11 。\n因此返回 [3, 14.5, 11] 。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/09/avg2-tree.jpg\" /></p>\n\n<pre>\n<strong>输入：</strong>root = [3,9,20,15,7]\n<strong>输出：</strong>[3.00000,14.50000,11.00000]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<p><meta charset=\"UTF-8\" /></p>\n\n<ul>\n\t<li>树中节点数量在&nbsp;<code>[1, 10<sup>4</sup>]</code> 范围内</li>\n\t<li><code>-2<sup>31</sup>&nbsp;&lt;= Node.val &lt;= 2<sup>31</sup>&nbsp;- 1</code></li>\n</ul>\n<p><strong>Auxiliary Code</strong></p>\n<pre>\n<code class=\"language-c\">\n</code>\n</pre>",
        "difficulty": "1",
        "topic": "树与二叉树",
        "tag": "LeetCode",
        "chapter": "第5章",
        "memory": 300,
        "time": 2,
        "testData": [
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            },
            {
                "input": "null",
                "output": "null"
            }
        ],
        "solution": [
            {
                "language": "C",
                "code": ""
            }
        ]
    }
]